// Code generated by goa v2.0.0-wip, DO NOT EDIT.
//
// chatter GRPC server
//
// Command:
// $ goa gen goa.design/goa/examples/streaming/design -o
// $(GOPATH)/src/goa.design/goa/examples/streaming

package server

import (
	"context"

	"goa.design/goa"
	chattersvc "goa.design/goa/examples/streaming/gen/chatter"
	"goa.design/goa/examples/streaming/gen/grpc/chatter/pb"
	goagrpc "goa.design/goa/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Server implements the pb.ChatterServer interface.
type Server struct {
	LoginH    goagrpc.UnaryHandler
	EchoerH   goagrpc.StreamHandler
	ListenerH goagrpc.StreamHandler
	SummaryH  goagrpc.StreamHandler
	HistoryH  goagrpc.StreamHandler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the expr.
type ErrorNamer interface {
	ErrorName() string
}

// echoerServerStream implements the chattersvc.EchoerServerStream.%!s(MISSING)
// interface.
type echoerServerStream struct {
	stream pb.Chatter_EchoerServer
}

// listenerServerStream implements the
// chattersvc.ListenerServerStream.%!s(MISSING) interface.
type listenerServerStream struct {
	stream pb.Chatter_ListenerServer
}

// summaryServerStream implements the
// chattersvc.SummaryServerStream.%!s(MISSING) interface.
type summaryServerStream struct {
	stream pb.Chatter_SummaryServer
	view   string
}

// historyServerStream implements the
// chattersvc.HistoryServerStream.%!s(MISSING) interface.
type historyServerStream struct {
	stream pb.Chatter_HistoryServer
	view   string
}

// New instantiates the server struct with the chatter service endpoints.
func New(e *chattersvc.Endpoints, uh goagrpc.UnaryHandler, sh goagrpc.StreamHandler) *Server {
	return &Server{
		LoginH:    NewLoginHandler(e.Login, uh),
		EchoerH:   NewEchoerHandler(e.Echoer, sh),
		ListenerH: NewListenerHandler(e.Listener, sh),
		SummaryH:  NewSummaryHandler(e.Summary, sh),
		HistoryH:  NewHistoryHandler(e.History, sh),
	}
}

// NewLoginHandler creates a gRPC handler which serves the "chatter" service
// "login" endpoint.
func NewLoginHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeLoginRequest, EncodeLoginResponse)
	}
	return h
}

// Login implements the "Login" method in pb.ChatterServer interface.
func (s *Server) Login(ctx context.Context, message *pb.LoginRequest) (*pb.LoginResponse, error) {
	resp, err := s.LoginH.Handle(ctx, message)
	if err != nil {
		sts, ok := status.FromError(err)
		if ok {
			return nil, err
		} else if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return nil, status.Error(codes.Unauthenticated, err.Error())
			}
		}
		return nil, sts.Err()
	}
	return resp.(*pb.LoginResponse), nil
}

// NewEchoerHandler creates a gRPC handler which serves the "chatter" service
// "echoer" endpoint.
func NewEchoerHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeEchoerRequest)
	}
	return h
}

// Echoer implements the "Echoer" method in pb.ChatterServer interface.
func (s *Server) Echoer(stream pb.Chatter_EchoerServer) error {
	p, err := s.EchoerH.Decode(stream.Context(), nil)
	if err != nil {
		sts, ok := status.FromError(err)
		if ok {
			return err
		} else if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return status.Error(codes.Unauthenticated, err.Error())
			case "invalid-scopes":
				return status.Error(codes.Unauthenticated, err.Error())
			}
		}
		return sts.Err()
	}
	ep := &chattersvc.EchoerEndpointInput{
		Stream:  &echoerServerStream{stream: stream},
		Payload: p.(*chattersvc.EchoerPayload),
	}
	err = s.EchoerH.Handle(stream.Context(), ep)
	if err != nil {
		sts, ok := status.FromError(err)
		if ok {
			return err
		} else if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return status.Error(codes.Unauthenticated, err.Error())
			case "invalid-scopes":
				return status.Error(codes.Unauthenticated, err.Error())
			}
		}
		return sts.Err()
	}
	return nil
}

// NewListenerHandler creates a gRPC handler which serves the "chatter" service
// "listener" endpoint.
func NewListenerHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeListenerRequest)
	}
	return h
}

// Listener implements the "Listener" method in pb.ChatterServer interface.
func (s *Server) Listener(stream pb.Chatter_ListenerServer) error {
	p, err := s.ListenerH.Decode(stream.Context(), nil)
	if err != nil {
		sts, ok := status.FromError(err)
		if ok {
			return err
		} else if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return status.Error(codes.Unauthenticated, err.Error())
			case "invalid-scopes":
				return status.Error(codes.Unauthenticated, err.Error())
			}
		}
		return sts.Err()
	}
	ep := &chattersvc.ListenerEndpointInput{
		Stream:  &listenerServerStream{stream: stream},
		Payload: p.(*chattersvc.ListenerPayload),
	}
	err = s.ListenerH.Handle(stream.Context(), ep)
	if err != nil {
		sts, ok := status.FromError(err)
		if ok {
			return err
		} else if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return status.Error(codes.Unauthenticated, err.Error())
			case "invalid-scopes":
				return status.Error(codes.Unauthenticated, err.Error())
			}
		}
		return sts.Err()
	}
	return nil
}

// NewSummaryHandler creates a gRPC handler which serves the "chatter" service
// "summary" endpoint.
func NewSummaryHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeSummaryRequest)
	}
	return h
}

// Summary implements the "Summary" method in pb.ChatterServer interface.
func (s *Server) Summary(stream pb.Chatter_SummaryServer) error {
	p, err := s.SummaryH.Decode(stream.Context(), nil)
	if err != nil {
		sts, ok := status.FromError(err)
		if ok {
			return err
		} else if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return status.Error(codes.Unauthenticated, err.Error())
			case "invalid-scopes":
				return status.Error(codes.Unauthenticated, err.Error())
			}
		}
		return sts.Err()
	}
	ep := &chattersvc.SummaryEndpointInput{
		Stream:  &summaryServerStream{stream: stream},
		Payload: p.(*chattersvc.SummaryPayload),
	}
	err = s.SummaryH.Handle(stream.Context(), ep)
	if err != nil {
		sts, ok := status.FromError(err)
		if ok {
			return err
		} else if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return status.Error(codes.Unauthenticated, err.Error())
			case "invalid-scopes":
				return status.Error(codes.Unauthenticated, err.Error())
			}
		}
		return sts.Err()
	}
	return nil
}

// NewHistoryHandler creates a gRPC handler which serves the "chatter" service
// "history" endpoint.
func NewHistoryHandler(endpoint goa.Endpoint, h goagrpc.StreamHandler) goagrpc.StreamHandler {
	if h == nil {
		h = goagrpc.NewStreamHandler(endpoint, DecodeHistoryRequest)
	}
	return h
}

// History implements the "History" method in pb.ChatterServer interface.
func (s *Server) History(message *pb.HistoryRequest, stream pb.Chatter_HistoryServer) error {
	p, err := s.HistoryH.Decode(stream.Context(), message)
	if err != nil {
		sts, ok := status.FromError(err)
		if ok {
			return err
		} else if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return status.Error(codes.Unauthenticated, err.Error())
			case "invalid-scopes":
				return status.Error(codes.Unauthenticated, err.Error())
			}
		}
		return sts.Err()
	}
	ep := &chattersvc.HistoryEndpointInput{
		Stream:  &historyServerStream{stream: stream},
		Payload: p.(*chattersvc.HistoryPayload),
	}
	err = s.HistoryH.Handle(stream.Context(), ep)
	if err != nil {
		sts, ok := status.FromError(err)
		if ok {
			return err
		} else if en, ok := err.(ErrorNamer); ok {
			switch en.ErrorName() {
			case "unauthorized":
				return status.Error(codes.Unauthenticated, err.Error())
			case "invalid-scopes":
				return status.Error(codes.Unauthenticated, err.Error())
			}
		}
		return sts.Err()
	}
	return nil
}

// Send streams instances of "pb.EchoerResponse" to the "echoer" endpoint gRPC
// stream.
func (s *echoerServerStream) Send(res string) error {
	v := NewEchoerResponse(res)
	return s.stream.Send(v)
}

// Recv reads instances of "pb.EchoerStreamingRequest" from the "echoer"
// endpoint gRPC stream.
func (s *echoerServerStream) Recv() (string, error) {
	var res string
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewEchoerStreamingRequest(v), nil
}

func (s *echoerServerStream) Close() error {
	// nothing to do here
	return nil
}

// Recv reads instances of "pb.ListenerStreamingRequest" from the "listener"
// endpoint gRPC stream.
func (s *listenerServerStream) Recv() (string, error) {
	var res string
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewListenerStreamingRequest(v), nil
}

func (s *listenerServerStream) Close() error {
	// nothing to do here
	return nil
}

// SendAndClose streams instances of "pb.ChatSummaryCollection" to the
// "summary" endpoint gRPC stream.
func (s *summaryServerStream) SendAndClose(res chattersvc.ChatSummaryCollection) error {
	vres := chattersvc.NewViewedChatSummaryCollection(res, "default")
	v := NewChatSummaryCollection(vres.Projected)
	return s.stream.SendAndClose(v)
}

// Recv reads instances of "pb.SummaryStreamingRequest" from the "summary"
// endpoint gRPC stream.
func (s *summaryServerStream) Recv() (string, error) {
	var res string
	v, err := s.stream.Recv()
	if err != nil {
		return res, err
	}
	return NewSummaryStreamingRequest(v), nil
}

// Send streams instances of "pb.HistoryResponse" to the "history" endpoint
// gRPC stream.
func (s *historyServerStream) Send(res *chattersvc.ChatSummary) error {
	vres := chattersvc.NewViewedChatSummary(res, s.view)
	v := NewHistoryResponse(vres.Projected)
	return s.stream.Send(v)
}

func (s *historyServerStream) Close() error {
	// nothing to do here
	return nil
}

// SetView sets the view.
func (s *historyServerStream) SetView(view string) {
	s.view = view
}
