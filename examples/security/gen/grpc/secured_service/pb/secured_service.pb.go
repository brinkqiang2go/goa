// Code generated by protoc-gen-go. DO NOT EDIT.
// source: secured_service.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	secured_service.proto

It has these top-level messages:
	SigninRequest
	SigninResponse
	SecureRequest
	SecureResponse
	DoublySecureRequest
	DoublySecureResponse
	AlsoDoublySecureRequest
	AlsoDoublySecureResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SigninRequest struct {
}

func (m *SigninRequest) Reset()                    { *m = SigninRequest{} }
func (m *SigninRequest) String() string            { return proto.CompactTextString(m) }
func (*SigninRequest) ProtoMessage()               {}
func (*SigninRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SigninResponse struct {
	// JWT token
	Jwt string `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
	// API Key
	ApiKey string `protobuf:"bytes,2,opt,name=api_key,json=apiKey" json:"api_key,omitempty"`
	// OAuth2 token
	OauthToken string `protobuf:"bytes,3,opt,name=oauth_token,json=oauthToken" json:"oauth_token,omitempty"`
}

func (m *SigninResponse) Reset()                    { *m = SigninResponse{} }
func (m *SigninResponse) String() string            { return proto.CompactTextString(m) }
func (*SigninResponse) ProtoMessage()               {}
func (*SigninResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SigninResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

func (m *SigninResponse) GetApiKey() string {
	if m != nil {
		return m.ApiKey
	}
	return ""
}

func (m *SigninResponse) GetOauthToken() string {
	if m != nil {
		return m.OauthToken
	}
	return ""
}

type SecureRequest struct {
	// Whether to force auth failure even with a valid JWT
	Fail bool `protobuf:"varint,1,opt,name=fail" json:"fail,omitempty"`
}

func (m *SecureRequest) Reset()                    { *m = SecureRequest{} }
func (m *SecureRequest) String() string            { return proto.CompactTextString(m) }
func (*SecureRequest) ProtoMessage()               {}
func (*SecureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SecureRequest) GetFail() bool {
	if m != nil {
		return m.Fail
	}
	return false
}

type SecureResponse struct {
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *SecureResponse) Reset()                    { *m = SecureResponse{} }
func (m *SecureResponse) String() string            { return proto.CompactTextString(m) }
func (*SecureResponse) ProtoMessage()               {}
func (*SecureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SecureResponse) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type DoublySecureRequest struct {
	// API key
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *DoublySecureRequest) Reset()                    { *m = DoublySecureRequest{} }
func (m *DoublySecureRequest) String() string            { return proto.CompactTextString(m) }
func (*DoublySecureRequest) ProtoMessage()               {}
func (*DoublySecureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DoublySecureRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type DoublySecureResponse struct {
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *DoublySecureResponse) Reset()                    { *m = DoublySecureResponse{} }
func (m *DoublySecureResponse) String() string            { return proto.CompactTextString(m) }
func (*DoublySecureResponse) ProtoMessage()               {}
func (*DoublySecureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DoublySecureResponse) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type AlsoDoublySecureRequest struct {
	// Username used to perform signin
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// Password used to perform signin
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// API key
	Key string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
}

func (m *AlsoDoublySecureRequest) Reset()                    { *m = AlsoDoublySecureRequest{} }
func (m *AlsoDoublySecureRequest) String() string            { return proto.CompactTextString(m) }
func (*AlsoDoublySecureRequest) ProtoMessage()               {}
func (*AlsoDoublySecureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AlsoDoublySecureRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *AlsoDoublySecureRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *AlsoDoublySecureRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type AlsoDoublySecureResponse struct {
	Field string `protobuf:"bytes,1,opt,name=field" json:"field,omitempty"`
}

func (m *AlsoDoublySecureResponse) Reset()                    { *m = AlsoDoublySecureResponse{} }
func (m *AlsoDoublySecureResponse) String() string            { return proto.CompactTextString(m) }
func (*AlsoDoublySecureResponse) ProtoMessage()               {}
func (*AlsoDoublySecureResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AlsoDoublySecureResponse) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func init() {
	proto.RegisterType((*SigninRequest)(nil), "pb.SigninRequest")
	proto.RegisterType((*SigninResponse)(nil), "pb.SigninResponse")
	proto.RegisterType((*SecureRequest)(nil), "pb.SecureRequest")
	proto.RegisterType((*SecureResponse)(nil), "pb.SecureResponse")
	proto.RegisterType((*DoublySecureRequest)(nil), "pb.DoublySecureRequest")
	proto.RegisterType((*DoublySecureResponse)(nil), "pb.DoublySecureResponse")
	proto.RegisterType((*AlsoDoublySecureRequest)(nil), "pb.AlsoDoublySecureRequest")
	proto.RegisterType((*AlsoDoublySecureResponse)(nil), "pb.AlsoDoublySecureResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SecuredService service

type SecuredServiceClient interface {
	// Creates a valid JWT
	Signin(ctx context.Context, in *SigninRequest, opts ...grpc.CallOption) (*SigninResponse, error)
	// This action is secured with the jwt scheme
	Secure(ctx context.Context, in *SecureRequest, opts ...grpc.CallOption) (*SecureResponse, error)
	// This action is secured with the jwt scheme and also requires an API key
	// query string.
	DoublySecure(ctx context.Context, in *DoublySecureRequest, opts ...grpc.CallOption) (*DoublySecureResponse, error)
	// This action is secured with the jwt scheme and also requires an API key
	// header.
	AlsoDoublySecure(ctx context.Context, in *AlsoDoublySecureRequest, opts ...grpc.CallOption) (*AlsoDoublySecureResponse, error)
}

type securedServiceClient struct {
	cc *grpc.ClientConn
}

func NewSecuredServiceClient(cc *grpc.ClientConn) SecuredServiceClient {
	return &securedServiceClient{cc}
}

func (c *securedServiceClient) Signin(ctx context.Context, in *SigninRequest, opts ...grpc.CallOption) (*SigninResponse, error) {
	out := new(SigninResponse)
	err := grpc.Invoke(ctx, "/pb.secured_service/Signin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedServiceClient) Secure(ctx context.Context, in *SecureRequest, opts ...grpc.CallOption) (*SecureResponse, error) {
	out := new(SecureResponse)
	err := grpc.Invoke(ctx, "/pb.secured_service/Secure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedServiceClient) DoublySecure(ctx context.Context, in *DoublySecureRequest, opts ...grpc.CallOption) (*DoublySecureResponse, error) {
	out := new(DoublySecureResponse)
	err := grpc.Invoke(ctx, "/pb.secured_service/DoublySecure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *securedServiceClient) AlsoDoublySecure(ctx context.Context, in *AlsoDoublySecureRequest, opts ...grpc.CallOption) (*AlsoDoublySecureResponse, error) {
	out := new(AlsoDoublySecureResponse)
	err := grpc.Invoke(ctx, "/pb.secured_service/AlsoDoublySecure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SecuredService service

type SecuredServiceServer interface {
	// Creates a valid JWT
	Signin(context.Context, *SigninRequest) (*SigninResponse, error)
	// This action is secured with the jwt scheme
	Secure(context.Context, *SecureRequest) (*SecureResponse, error)
	// This action is secured with the jwt scheme and also requires an API key
	// query string.
	DoublySecure(context.Context, *DoublySecureRequest) (*DoublySecureResponse, error)
	// This action is secured with the jwt scheme and also requires an API key
	// header.
	AlsoDoublySecure(context.Context, *AlsoDoublySecureRequest) (*AlsoDoublySecureResponse, error)
}

func RegisterSecuredServiceServer(s *grpc.Server, srv SecuredServiceServer) {
	s.RegisterService(&_SecuredService_serviceDesc, srv)
}

func _SecuredService_Signin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SigninRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredServiceServer).Signin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.secured_service/Signin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredServiceServer).Signin(ctx, req.(*SigninRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredService_Secure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredServiceServer).Secure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.secured_service/Secure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredServiceServer).Secure(ctx, req.(*SecureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredService_DoublySecure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoublySecureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredServiceServer).DoublySecure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.secured_service/DoublySecure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredServiceServer).DoublySecure(ctx, req.(*DoublySecureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecuredService_AlsoDoublySecure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlsoDoublySecureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecuredServiceServer).AlsoDoublySecure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.secured_service/AlsoDoublySecure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecuredServiceServer).AlsoDoublySecure(ctx, req.(*AlsoDoublySecureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SecuredService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.secured_service",
	HandlerType: (*SecuredServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signin",
			Handler:    _SecuredService_Signin_Handler,
		},
		{
			MethodName: "Secure",
			Handler:    _SecuredService_Secure_Handler,
		},
		{
			MethodName: "DoublySecure",
			Handler:    _SecuredService_DoublySecure_Handler,
		},
		{
			MethodName: "AlsoDoublySecure",
			Handler:    _SecuredService_AlsoDoublySecure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "secured_service.proto",
}

func init() { proto.RegisterFile("secured_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x4e, 0xeb, 0x30,
	0x10, 0x85, 0xd5, 0xe6, 0xde, 0x52, 0x06, 0xfa, 0x83, 0x29, 0x6a, 0x14, 0x90, 0x40, 0x46, 0x02,
	0x16, 0xa8, 0x20, 0x78, 0x82, 0x4a, 0xec, 0x10, 0x9b, 0x96, 0x25, 0x52, 0xe5, 0xb4, 0x53, 0x30,
	0x0d, 0xb1, 0x89, 0x13, 0xaa, 0x3c, 0x00, 0xef, 0x8d, 0xec, 0x38, 0x25, 0x69, 0x43, 0x77, 0x9e,
	0x33, 0x33, 0xc7, 0x9f, 0x67, 0x0c, 0x47, 0x0a, 0xa7, 0x49, 0x84, 0xb3, 0x89, 0xc2, 0xe8, 0x8b,
	0x4f, 0x71, 0x20, 0x23, 0x11, 0x0b, 0x52, 0x97, 0x3e, 0xed, 0x40, 0x6b, 0xcc, 0x5f, 0x43, 0x1e,
	0x8e, 0xf0, 0x33, 0x41, 0x15, 0xd3, 0x17, 0x68, 0xe7, 0x82, 0x92, 0x22, 0x54, 0x48, 0xba, 0xe0,
	0xbc, 0x2f, 0x63, 0xb7, 0x76, 0x56, 0xbb, 0xda, 0x1d, 0xe9, 0x23, 0xe9, 0xc3, 0x0e, 0x93, 0x7c,
	0xb2, 0xc0, 0xd4, 0xad, 0x1b, 0xb5, 0xc1, 0x24, 0x7f, 0xc4, 0x94, 0x9c, 0xc2, 0x9e, 0x60, 0x49,
	0xfc, 0x36, 0x89, 0xc5, 0x02, 0x43, 0xd7, 0x31, 0x49, 0x30, 0xd2, 0xb3, 0x56, 0xe8, 0x39, 0xb4,
	0xc6, 0x86, 0xc5, 0x5e, 0x47, 0x08, 0xfc, 0x9b, 0x33, 0x1e, 0x18, 0xf7, 0xe6, 0xc8, 0x9c, 0xe9,
	0x05, 0xb4, 0xf3, 0x22, 0x8b, 0xd0, 0x83, 0xff, 0x73, 0x8e, 0xc1, 0xcc, 0x42, 0x64, 0x01, 0xbd,
	0x84, 0xc3, 0x07, 0x91, 0xf8, 0x41, 0x5a, 0xb6, 0xec, 0x82, 0xa3, 0xc9, 0x2c, 0xef, 0x02, 0x53,
	0x7a, 0x0d, 0xbd, 0x72, 0xe1, 0x56, 0xdb, 0x29, 0xf4, 0x87, 0x81, 0x12, 0x55, 0xd6, 0x1e, 0x34,
	0x13, 0x85, 0x51, 0xc8, 0x3e, 0xd0, 0xf6, 0xac, 0x62, 0x9d, 0x93, 0x4c, 0xa9, 0xa5, 0x88, 0x66,
	0x76, 0x2a, 0xab, 0x38, 0x47, 0x72, 0x7e, 0x91, 0x6e, 0xc1, 0xdd, 0xbc, 0x64, 0x1b, 0xd6, 0xdd,
	0x77, 0x1d, 0x3a, 0x6b, 0x7b, 0x24, 0x37, 0xd0, 0xc8, 0x96, 0x45, 0x0e, 0x06, 0xd2, 0x1f, 0x94,
	0x36, 0xe9, 0x91, 0xa2, 0x64, 0xad, 0x75, 0x83, 0xf1, 0xb0, 0x0d, 0xc5, 0xd7, 0xd9, 0x86, 0x32,
	0xcb, 0x10, 0xf6, 0x8b, 0x8c, 0xa4, 0xaf, 0x6b, 0x2a, 0x46, 0xe3, 0xb9, 0x9b, 0x09, 0x6b, 0xf1,
	0x04, 0xdd, 0xf5, 0xa7, 0x92, 0x63, 0x5d, 0xfd, 0xc7, 0x94, 0xbd, 0x93, 0xea, 0x64, 0x66, 0xe7,
	0x37, 0xcc, 0xe7, 0xbd, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x75, 0x40, 0xa7, 0xa4, 0xd5, 0x02,
	0x00, 0x00,
}
